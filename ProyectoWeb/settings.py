"""
Django settings for ProyectoWeb project.

Generated by 'django-admin startproject' using Django 5.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path

from django.contrib.messages import constants as mensajes_de_error
import os
import dj_database_url
from dotenv import load_dotenv

# Cargar variables desde .env si existen
load_dotenv()


BASE_DIR = Path(__file__).resolve().parent.parent

# Seguridad y entorno
SECRET_KEY = os.environ.get("SECRET_KEY", "clave-secreta-dev")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "False") == "True"
ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ProyectoWebApp',
    'Servicios',
    'blog',
    'compras',
    'contacto',
    'paqueteria',
    'tienda',
    'carro',
    'autenticacion',
    'crispy_forms',
    'crispy_bootstrap4',
    'pedidos',
    'django.contrib.humanize',
    'Paypal',
    'paypal.standard.ipn',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ProyectoWeb.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'carro.context_procesor.importe_total_carro',
            ],
        },
    },
]

WSGI_APPLICATION = 'ProyectoWeb.wsgi.application'



# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
import os
from pathlib import Path
import dj_database_url
from dotenv import load_dotenv

# 1) Carga .env en local (solo si lo necesitas)
load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

def configure_database():
    """
    Configura DATABASES buscando DATABASE_URL en entorno.
    Si no existe, deja SQLite para desarrollo local.
    """
    db_url = os.environ.get("DATABASE_URL")
    if not db_url:
        # Desarrollo local con SQLite
        return {
            "default": {
                "ENGINE": "django.db.backends.sqlite3",
                "NAME": BASE_DIR / "db.sqlite3",
            }
        }

    # Producción: PostgreSQL en Render (ssl_require=True fuerza SSL)
    return {
        "default": dj_database_url.config(
            default=db_url,
            conn_max_age=600,
            ssl_require=True
        )
    }

DATABASES = configure_database()


if not DATABASES:
    # Fallback a SQLite para dev local
    DATABASES = {
      'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
      }
    }



# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
#LANGUAGE_CODE = 'es-eu'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL   = '/static/'
STATIC_ROOT  = BASE_DIR / 'staticfiles'

MEDIA_URL    = '/media/'
MEDIA_ROOT   = BASE_DIR / 'media'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# configuracion de email 

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap4"

CRISPY_TEMPLATE_PACK = "bootstrap4"

MESSAGE_TAGS={
    
    mensajes_de_error.DEBUG : 'debug',
    mensajes_de_error.INFO : 'info',
    mensajes_de_error.SUCCESS : 'success',
    mensajes_de_error.WARNING : 'warning',
    mensajes_de_error.ERROR : 'danger',
    
}

# settings.py
PAYPAL_CLIENT_ID = os.environ.get("PAYPAL_CLIENT_ID")
PAYPAL_SECRET = os.environ.get("PAYPAL_SECRET")
PAYPAL_ENVIRONMENT = 'sandbox'  # o 'live' cuando estés en producción
PAYPAL_RECEIVER_EMAIL = os.environ.get("PAYPAL_RECEIVER_EMAIL")
PAYPAL_TEST = True  # Usa sandbox

LOGIN_URL = '/paqueteria/login/'
LOGIN_REDIRECT_URL = '/paqueteria/dashboard/'
LOGOUT_REDIRECT_URL = '/paqueteria/login/'

